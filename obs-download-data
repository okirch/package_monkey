#!/usr/bin/python3
#
# To download the OBS data for Dolomite, invoke like this:
#  ./obs-download-data --family dolomite --db dolomite.db
#

forceRefresh = True

from options import OBSClientApplication
from obsclnt import OBSClient, OBSProject
from obsclnt import PackageUpdateJob, PostprocessingJob
from util import loggingFacade, debugmsg, infomsg, warnmsg, errormsg
from util import NameMatcher

class OBSProjectCollection(object):
	def __init__(self, cachePath):
		self.cachePath = cachePath
		# use a list rather than a dict to retain order
		self._projects = []

	def add(self, projectName, product):
		for project in self._projects:
			if project.name == projectName:
				return project

		infomsg(f"  {projectName}")
		project = OBSProject(projectName, product)
		project.setCachePath(self.cachePath)
		self._projects.append(project)
		return project

	def __iter__(self):
		return iter(self._projects)

application = OBSClientApplication('obs-download-data')
application.addArgument('--action', help = 'Restrict what this tool will do (download, postproc)')
application.addArgument(dest = 'packages', metavar = 'PACKAGES', nargs = '*',
			help = 'List of package names to refresh')

store = application.loadBackingStore(readonly = False,
		dependencyTreeLookups = False,
		sourceLookups = True)
assert(store)

# Make sure we have all the products that we use recorded in the database
application.catalog.updateBackingStore(store)

# store the arch we're asked to look at, so that we don't
# have to play guessing games later on
store.putProperty("arch", application.architecture)

obs = application.obsClient
productFamily = application.productFamily
evolutionLogPath = application.getOutputPath("evolution.log")

projects = OBSProjectCollection(application.getCachePath(f"obs/{obs.hostname}"))
for release in application.enumerateProducts():

	product = release.createEmptyProduct()

	infomsg(f"Downloading OBS information for release {release}")

	for bp in release.buildProjects:
		projects.add(bp, product)

nameMatcher = None
if application.opts.packages:
	nameMatcher = NameMatcher(application.opts.packages)

action = application.opts.action

if action in (None, 'download'):
	application.beginChapter(f"Updating package data for all {application.productFamily} projects")
	# assume projects are sorted with older versions preceding more recent versions
	# Process them in more-recent-first order

	job = PackageUpdateJob(obs, onlyPackages = nameMatcher)
	for project in projects:
		job.addProject(project)
	job.evolutionLog.write(evolutionLogPath)

	job.processUpdates(store)

	if nameMatcher is not None:
		badNames = nameMatcher.reportUnmatched()
		if badNames:
			errormsg(f"Bad package name(s) given on command line: {' '.join(badNames)}")
			raise Exception(f"Package names not found")

if action in (None, 'postproc'):
	# Close the DB and reopen it. This ensures that the DB object starts out with no
	# incorrect cached data
	store = application.reloadBackingStore(readonly = False,
			dependencyTreeLookups = False,
			sourceLookups = True)

	application.beginChapter(f"Postprocessing package data for all {application.productFamily} projects")

	job = PostprocessingJob(productFamily, onlyPackages = nameMatcher, evolutionLog = evolutionLogPath)

	job.processDependencies(store)
	job.purgeStale(store)
