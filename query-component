#!/usr/bin/python3

from options import Application
from filter import Classification, PackageFilter
from util import IndexFormatter, IndexFormatterTwoLevels, CountingDict
from queries import QueryContext, QuerySubjectComponent, QuerySubjectComponentOrTopic
from queries import PackageRequiresLabelsPredicate, RequirementsReport, BuildRequirementsReport
from queries import GenericQuery, GenericRenderer
from query.runtime_requires import WhatRequiresQuery, WhatRequiresRenderer
from query.runtime_requires import InversionsQuery, InversionsRenderer
from query.build_requires import WhatBuildRequiresQuery, WhatBuildRequiresRenderer
from query.build_requires import BuildInversionsQuery, BuildInversionsRenderer
from csvio import CSVWriter

class QueryApplication(Application):
	def __init__(self, name, *args, **kwargs):
		super().__init__(name, *args, **kwargs)

		self.addArgument(dest = 'components', metavar = 'COMPONENTS', nargs = '*', help = 'list of labels to query')
		self.addArgument('--imports', action = 'store_true', default = False)
		self.addArgument('--terse', action = 'store_true', default = False)
		self.addArgument('--verbose', action = 'store_true', default = False)
		self.addArgument('--list', action = 'store_true', default = False)
		self.addArgument('--requires', action = 'store_true', default = False)
		self.addArgument('--what-requires', action = 'append', default = [])
		self.addArgument('--what-build-requires', action = 'append', default = [])
		self.addArgument('--unclassified', action = 'store_true', default = False)
		self.addArgument('--inversions', action = 'store_true', default = False)
		self.addArgument('--build-inversions', action = 'store_true', default = False)
		self.addArgument('--bubble-up', action = 'store_true', default = False)
		self.addArgument('--food-for-pm', action = 'store_true', default = False)
		self.addArgument('--ignore', action = 'append', default = [])
		self.addArgument('--output-directory', default = None)
		self.addArgument('--max-alternatives')
		self.parseArguments()

		self.verbosityLevel = 1
		if self.opts.terse:
			self.verbosityLevel = 0
		if self.opts.verbose:
			self.verbosityLevel = 2

	def performQueries(self):
		context = QueryContext(self)

		actions = []
		if self.opts.list:
			actions.append(ListQuery(context))
		if self.opts.requires:
			actions.append(RequiresQuery(context))
		if self.opts.what_requires:
			actions.append(WhatRequiresQuery(context, self.opts.what_requires))
		if self.opts.what_build_requires:
			actions.append(WhatBuildRequiresQuery(context, self.opts.what_build_requires))
		if self.opts.imports:
			actions.append(ImportedLabelsQuery(context))
		if self.opts.unclassified:
			actions.append(UnclassifiedQuery(context, self.opts.max_alternatives))
		if self.opts.inversions:
			actions.append(InversionsQuery(context, self.opts.ignore))
		if self.opts.build_inversions:
			actions.append(BuildInversionsQuery(context, self.opts.ignore))
		if self.opts.bubble_up:
			actions.append(BubbleUpQuery(context))
		if self.opts.food_for_pm:
			actions.append(FoodForPMQuery(context, self.opts.output_directory, ignore = self.opts.ignore))

		if len(actions) != 1:
			raise Exception(f"Expected exactly one action argument")

		for ac in actions:
			ac.renderer.renderPreamble(ac)

		for label in context.enumerateLabelsForQuery(self.opts.components):
			for ac in actions:
				ac(label)

def main():
	application = QueryApplication('query-component')
	application.performQueries()

class APIRenderer(GenericRenderer):
	def __init__(self):
		self.renderPurposes = False

	def renderHeader(self, component, querySubject):
		pass

	def renderTrailer(self, component, querySubject):
		pass

	def renderImportedAPIs(self, importer, apis, indent):
		pass

	def renderWildImports(self, importer, apis, indent):
		pass

class APITextRenderer(APIRenderer):
	def renderHeader(self, component, querySubject):
		self.renderImportedAPIs(component, querySubject.alwaysImportedAPIs, 0)

	def renderImportedAPIs(self, importer, apis, indent):
		ws = indent * " "
		self.renderLabelSet(f"{ws}{importer} imports the following APIs:", apis)

	def renderWildImports(self, importer, apis, indent):
		ws = indent * " "
		self.renderLabelSet(f"{ws}{importer} uses the following non-APIs:", apis)

class APISummarizer(APIRenderer):
	def __init__(self, *args, **kwargs):
		super().__init__(*args, **kwargs)
		self._summary = {}

	def renderImportedAPIs(self, importer, apis, indent):
		for label in apis:
			try:
				self._summary[label] += 1
			except:
				self._summary[label] = 1

	def renderWildImports(self, importer, apis, indent):
		pass

	def renderTrailer(self, component, querySubject):
		print(f"{component} imports the following APIs")
		for label, count in sorted(self._summary.items(), key = str):
			print(f" {count:5} {label}")

class ImportedLabelsQuery(GenericQuery):
	def __init__(self, context):
		if context.verbosityLevel == 0:
			renderer = APISummarizer()
		else:
			renderer = APITextRenderer()

		super().__init__(context, renderer)

	def __call__(self, queryTargetLabel):
		context = self.context
		renderer = self.renderer

		querySubject = QuerySubjectComponent("imports", context, queryTargetLabel)

		renderer.renderHeader(queryTargetLabel, querySubject)
		for topic in context.bottomUpTraversal(querySubject.binaryLabels):
			if topic.parent is None:
				self.inspectTopic(querySubject, topic, renderer)

		# FIXME: inspect the component's build configs and check what they import

		renderer.renderTrailer(queryTargetLabel, querySubject)

	# topic is a requirement of some label that's part of component
	def inspectTopic(self, querySubject, topic, renderer):
		visitor = self.Visitor(querySubject, topic)

		visitor.render(renderer)

		if renderer.renderPurposes:
			for purpose in topic.objectPurposes:
				purposeVisitor = visitor.descend(purpose)
				purposeVisitor.render(renderer)

		for flavor in topic.flavors:
			flavorVisitor = visitor.descend(flavor)
			flavorVisitor.render(renderer)

			if renderer.renderPurposes:
				for purpose in flavor.objectPurposes:
					purposeVisitor = flavorVisitor.descend(purpose)
					purposeVisitor.render(renderer)
		return


	class Visitor:
		def __init__(self, querySubject, label, parent = None):
			self.querySubject = querySubject
			self.label = label

			if parent:
				subtractAPIs = parent.maskAPIs
				self.indent = parent.indent + 1
			else:
				subtractAPIs = None
				self.indent = 1

			context = querySubject.context
			labelOrder = context.labelOrder

			requiredLabels = labelOrder.downwardClosureFor(label)

			if label.purposeName:
				if subtractAPIs:
					subtractAPIs = subtractAPIs.union(self.derivePurposeAPIs(label.purposeName, subtractAPIs))
				else:
					subtractAPIs = self.derivePurposeAPIs(label.purposeName, querySubject.accessibleAPIs)

			if subtractAPIs:
				requiredLabels = requiredLabels.difference(subtractAPIs)

			self.importedAPIs = requiredLabels.intersection(querySubject.importableAPIs)
			self.importedAPIs.difference_update(querySubject.alwaysImportedAPIs)

			wildImports = requiredLabels.difference(context._allAPIs).difference(querySubject.accessibleAPIs)
			if label.purposeName and wildImports:
				wildImports.difference_update(self.derivePurposeAPIs(label.purposeName, querySubject.importableAPIs))
			if wildImports:
				wildImports = labelOrder.maxima(wildImports)
			self.wildImports = wildImports

			self.maskAPIs = self.importedAPIs.union(wildImports)
			if subtractAPIs:
				self.maskAPIs.update(subtractAPIs)
			self.maskAPIs.add(label)
			self.maskAPIs = labelOrder.downwardClosureForSet(self.maskAPIs)

		def derivePurposeAPIs(self, purposeName, labelSet):
			# for a label like @Foo-32bit, we allow access to any @BlahAPI-32bit
			return Classification.createLabelSet(
					filter(bool,
						map(lambda _: _.getObjectPurpose(purposeName), labelSet)
						))

		def render(self, renderer):
			renderer.renderImportedAPIs(self.label, self.importedAPIs, 1)
			if self.wildImports:
				renderer.renderWildImports(self.label, self.wildImports, 1)

		def descend(self, label):
			return self.__class__(self.querySubject, label, parent = self)


class UnclassifiedQuery(GenericQuery):
	def __init__(self, context, maxAlternatives):
		if maxAlternatives in (None, '', 'any'):
			maxAlternatives = None
		else:
			maxAlternatives = int(maxAlternatives)

		renderer = UnclassifiedRenderer(context, maxAlternatives)
		super().__init__(context, renderer)

	def __call__(self, queryTargetLabel):
		unsorted = list(self.context.getUnclassifiedForComponent(queryTargetLabel))

		renderer = self.renderer
		for rpm, numOther in sorted(unsorted, key = (lambda pair: (pair[1], pair[0].name))):
			renderer.renderCandidate(rpm, numOther)

class UnclassifiedRenderer(GenericRenderer):
	def __init__(self, context, maxAlternatives):
		self.maxAlternatives = maxAlternatives

	def renderCandidate(self, rpm, numOther):
		if self.maxAlternatives is not None and numOther > self.maxAlternatives:
			return

		if numOther == 0:
			print(f"  {rpm}")
		elif numOther == QueryContext.QUASI_INFINITE:
			print(f"  {rpm} - anywhere")
		else:
			print(f"  {rpm} - {numOther} alternatives")

class BubbleUpQuery(GenericQuery):
	def __init__(self, context):
		super().__init__(context, None)

	def __call__(self, queryTargetLabel):
		store = self.context.connectDatabase()

		rpmToBuildMap = {}
		for build in self.context.getBuildsForComponent(queryTargetLabel):
			for orpm in build.binaries:
				if orpm.isSynthetic:
					continue
				rpm = store.recoverLatestPackageByName(orpm.name)
				if rpm is None:
					raise Exception(f"build {build} references {orpm} which is not in the DB")
				rpmToBuildMap[rpm] = build
		print(f"{queryTargetLabel} contains {len(rpmToBuildMap)} rpms")

		dominationMatrix = self.DominationMatrix()
		for rpm, build in rpmToBuildMap.items():
			for req in rpm.enumerateRequiredRpms():
				dominatedBuild = rpmToBuildMap.get(req)
				if dominatedBuild is None:
					continue
				if dominatedBuild is build:
					continue

				dominationMatrix.add(build, dominatedBuild)

		for build in self.context.getBuildsForComponent(queryTargetLabel):
			dominatedBy = dominationMatrix.get(build)
			if not dominatedBy:
				print(f"   {build}")

	class DominationMatrix(object):
		def __init__(self):
			self.dominatedBy = {}

		def add(self, dominatingBuild, dominatedBuild):
			dset = self.dominatedBy.get(dominatedBuild)
			if dset is None:
				dset = set()
				self.dominatedBy[dominatedBuild] = dset
			dset.add(dominatingBuild)

		def get(self, build):
			return self.dominatedBy.get(build)

class ListQuery(GenericQuery):
	def __init__(self, context, onlyBaseLabels = None):
		super().__init__(context, None)

		classification = context.classification
		membershipSizes = CountingDict()

		if onlyBaseLabels is None and context.verbosityLevel < 2:
			onlyBaseLabels = True

		for label, members in classification.enumeratePackages():
			if onlyBaseLabels:
				label = label.baseLabel
			membershipSizes.increment(label, len(members))

		for label, build in classification.enumerateBuilds():
			membershipSizes.increment(label, 1)

		self._membershipSizes = membershipSizes

	def __call__(self, queryTargetLabel):
		# stats = self.getComponentStats(queryTargetLabel)

		if queryTargetLabel.type is Classification.TYPE_BINARY:
			self.processTopic(queryTargetLabel)
			return

		size = self._membershipSizes[queryTargetLabel]
		print(f"  {queryTargetLabel} ({size} OBS packages)")

		verbosityLevel = self.context.verbosityLevel
		if verbosityLevel > 0:
			classificationScheme = self.context.classificationScheme
			topicOrder = self.context.labelOrder

			binaryLabels = classificationScheme.getReferencingLabels(queryTargetLabel)
			for label in topicOrder.bottomUpTraversal(binaryLabels):
				self.processTopic(label)

			print()
		return

	def processTopic(self, label):
		size = self._membershipSizes[label]
		if not size:
			return

		print(f"      - {label} ({size} rpms)")
		if self.context.verbosityLevel > 1:
			classification = self.context.classification
			for rpm in sorted(classification.getPackagesForLabel(label), key = str):
				print(f"          {rpm}")

class RequiresQuery(GenericQuery):
	def __init__(self, context, onlyBaseLabels = None):
		super().__init__(context, None)

		classification = context.classification
		membershipSizes = CountingDict()

		self._membershipSizes = membershipSizes

	def __call__(self, queryTargetLabel):
		if queryTargetLabel.type is Classification.TYPE_BINARY:
			not_implemented
			return

		topicOrder = self.context.labelOrder
		classificationScheme = self.context.classificationScheme

		if self.context.verbosityLevel <= 1:
			binaryLabels = classificationScheme.getReferencingLabels(queryTargetLabel)

			reqs = Classification.createLabelSet()
			for topic in binaryLabels:
				reqs.update(topicOrder.lowerNeighbors(topic))
			binaryLabels.update(reqs)

			tf = topicOrder.asTreeFormatter(binaryLabels, topDown = True)
		else:
			binaryLabels = classificationScheme.getReferencingLabels(queryTargetLabel)
			binaryLabels = topicOrder.downwardClosureForSet(binaryLabels)
			tf = topicOrder.asTreeFormatter(binaryLabels, topDown = True)

		print(f"  {queryTargetLabel}")
		for prefix, label in tf.render():
			if label.sourceProject is not queryTargetLabel:
				print(f" {prefix}{label} [{label.sourceProject}]")
			else:
				print(f" {prefix}{label}")
		print()
		return

class FoodForPMQuery(GenericQuery):
	def __init__(self, context, outputPath = None, ignore = []):
		super().__init__(context, None)
		self.outputPath = outputPath
		self.once = False

		self.ignore = None
		if ignore is not None:
			self.ignore = Classification.createLabelSet()
			for name in ignore:
				label = context.getLabel('ignored label', name)
				if label.type is Classification.TYPE_BINARY:
					self.ignore.add(label)
				elif label.type is Classification.TYPE_SOURCE:
					self.ignore.update(context.getLabelsForComponent(label))
				else:
					raise Exception(f"Cannot ignore label {name} - unsupported type {label.type}")

		self._packageTopicsWritten = Classification.createLabelSet()

	def __call__(self, queryTargetLabel):
		if self.once:
			return
		self.once = True

		context = self.context
		topicOrder = context.labelOrder
		allTopics = context.allBinaryLabels

		# we only ever look at base labels
		baseTopics = Classification.createLabelSet()
		topicPackageCount = CountingDict()
		baseTopicClosure = {}
		for topic in allTopics:
			baseLabel = topic.baseLabel
			baseTopics.add(baseLabel)

			count = len(context.classification.getPackagesForLabel(topic))
			topicPackageCount.increment(baseLabel, count)

			closure = baseTopicClosure.get(baseLabel)
			if closure is None:
				closure = Classification.createLabelSet()
				baseTopicClosure[baseLabel] = closure
			closure.update(topicOrder.downwardClosureFor(topic))

		# ignore any topics that exist just as a handle (like @SystemPythonCore is a front for @Python311)
		empty = Classification.createLabelSet(filter(lambda topic: not topicPackageCount[topic], baseTopics))
		baseTopics.difference_update(empty)

		apiTopics = Classification.createLabelSet(filter(lambda L: L.isAPI, allTopics))

		allTopics = baseTopics.difference(apiTopics)

		firstLevelTopics = topicOrder.maxima(allTopics)

		firstLevelTopicsClosure = topicOrder.upwardClosureForSet(firstLevelTopics)
		secondLevelTopics = topicOrder.maxima(allTopics.difference(firstLevelTopicsClosure))

		if self.ignore:
			firstLevelTopics.difference_update(self.ignore)
			secondLevelTopics.difference_update(self.ignore)

		csv = None

		print(f"First level topics")
		if self.outputPath is not None:
			csv = CSVWriter(self.outputPath + "/firstlevel.csv", ['component', 'topic'])

		for topic in self.sortedTopics(firstLevelTopics):
			print(f"   {topic.componentName}:{topic}")
			if csv:
				csv.write((topic.componentName, topic.name))

		print(f"Second level topics")
		if self.outputPath is not None:
			csv = CSVWriter(self.outputPath + "/secondlevel.csv", ['component', 'topic', 'required by'])

		for topic in self.sortedTopics(secondLevelTopics):
			print(f"   {topic.componentName}:{topic} required by:")
			for upper in self.dominatingLabels(topic):
				print(f"     {upper.componentName}:{upper}")
				if csv:
					csv.write((topic.componentName, topic.name, upper.name))

		if self.outputPath is not None:
			csv = CSVWriter(self.outputPath + "/packages.csv", ['component', 'topic', 'package'])
			for topic in firstLevelTopics:
				self.writePackagesForTopic(topic, csv)
			for topic in secondLevelTopics:
				self.writePackagesForTopic(topic, csv)

	def sortedTopics(self, topics):
		def sortkey(label):
			return (label.componentName, label.name)
		return sorted(topics, key = sortkey)

	def dominatingLabels(self, topic):
		topicOrder = self.context.labelOrder

		result = Classification.createLabelSet()
		for label in topicOrder.upperNeighbors(topic):
			label = label.baseLabel
			if label is topic:
				continue
			# this doesn't work right now because we don't store the "is api for" relation in
			# the XML file generated by the labelling run
			if label is topic.correspondingAPI:
				continue

			# what we do instead is we hide all API labels at this point
			if label.isAPI:
				continue

			result.add(label)

		return result

	def writePackagesForTopic(self, topic, csv):
		context = self.context
		topicOrder = context.labelOrder

		topicClosure = topicOrder.upwardClosureFor(topic).difference(self._packageTopicsWritten)
		self._packageTopicsWritten.update(topicClosure)

		packages = set()
		for rpm in context.classification.getPackagesForLabel(topic):
			for sib in context.getSiblingsForPackage(rpm):
				if context.getLabelForPackage(sib) in topicClosure:
					packages.add(sib)

		for rpm in packages:
			csv.write((topic.componentName, topic.name, rpm.shortname))

main()
